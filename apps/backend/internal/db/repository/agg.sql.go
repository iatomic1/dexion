// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: agg.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllWalletsAndWatchers = `-- name: GetAllWalletsAndWatchers :many
SELECT
    w.address,
    w.created_at,
    (
        SELECT jsonb_agg(json_build_object('user_id', uw.user_id, 'nickname', uw.nickname, 'preference', uw.notifications))
        FROM user_wallets uw
        WHERE uw.wallet_address = w.address
    ) AS app_watchers,
    (
        SELECT jsonb_agg(json_build_object('chat_id', tuw.chat_id, 'nickname', tuw.nickname, 'preference', tu.notification_preference))
        FROM telegram_user_wallets tuw
        JOIN telegram_users tu ON tuw.chat_id = tu.chat_id
        WHERE tuw.wallet_address = w.address
    ) AS telegram_watchers
FROM
    wallets w
`

type GetAllWalletsAndWatchersRow struct {
	Address          string             `binding:"required" example:"SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1" json:"address"`
	CreatedAt        pgtype.Timestamptz `json:"createdAt"`
	AppWatchers      []byte             `json:"appWatchers"`
	TelegramWatchers []byte             `json:"telegramWatchers"`
}

func (q *Queries) GetAllWalletsAndWatchers(ctx context.Context) ([]*GetAllWalletsAndWatchersRow, error) {
	rows, err := q.db.Query(ctx, getAllWalletsAndWatchers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllWalletsAndWatchersRow
	for rows.Next() {
		var i GetAllWalletsAndWatchersRow
		if err := rows.Scan(
			&i.Address,
			&i.CreatedAt,
			&i.AppWatchers,
			&i.TelegramWatchers,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
