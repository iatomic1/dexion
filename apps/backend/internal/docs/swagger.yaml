basePath: /api/v1
definitions:
  backend_api_http.InternalServerErrorResponse:
    properties:
      errors: {}
      message:
        type: string
      status:
        example: Internal Server Error
        type: string
    type: object
  backend_api_http.Response:
    properties:
      data: {}
      errors: {}
      message:
        type: string
      status:
        type: string
    type: object
  backend_internal_db_repository.CreateWatchlistParams:
    properties:
      ca:
        example: SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token
        type: string
      userId:
        type: string
    required:
    - ca
    type: object
  backend_internal_db_repository.GetUserTrackedWalletsRow:
    properties:
      address:
        example: SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1
        type: string
      createdAt:
        $ref: '#/definitions/pgtype.Timestamptz'
      emoji:
        type: string
      nickname:
        example: iatomic
        type: string
      notifications:
        type: boolean
    required:
    - address
    - nickname
    type: object
  backend_internal_db_repository.UpdateWalletPreferencesParams:
    properties:
      id:
        type: string
      nickname:
        example: iatomic
        type: string
      notifications:
        type: boolean
      walletAddress:
        example: SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1
        type: string
    required:
    - nickname
    - walletAddress
    type: object
  backend_internal_db_repository.UpsertUserWalletParams:
    properties:
      emoji:
        type: string
      nickname:
        example: iatomic
        type: string
      userId:
        type: string
      walletAddress:
        example: SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1
        type: string
    required:
    - nickname
    - walletAddress
    type: object
  backend_internal_db_repository.UserWallet:
    properties:
      createdAt:
        type: string
      emoji:
        type: string
      nickname:
        example: iatomic
        type: string
      notifications:
        type: boolean
      updatedAt:
        type: string
      userId:
        type: string
      walletAddress:
        example: SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1
        type: string
    required:
    - nickname
    - walletAddress
    type: object
  backend_internal_db_repository.Wallet:
    properties:
      address:
        example: SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1
        type: string
      createdAt:
        $ref: '#/definitions/pgtype.Timestamptz'
    required:
    - address
    type: object
  backend_internal_db_repository.Watchlist:
    properties:
      ca:
        example: SP1Y5YSTAHZ88XYK1VPDH24GY0HPX5J4JECTMY4A1.velar-token
        type: string
      createdAt:
        type: string
      id:
        type: string
      updatedAt:
        type: string
      userId:
        type: string
    required:
    - ca
    type: object
  pgtype.InfinityModifier:
    enum:
    - 1
    - 0
    - -1
    type: integer
    x-enum-varnames:
    - Infinity
    - Finite
    - NegativeInfinity
  pgtype.Timestamptz:
    properties:
      infinityModifier:
        $ref: '#/definitions/pgtype.InfinityModifier'
      time:
        type: string
      valid:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: atomic.k.2739@gmail.com
    name: Atomic
    url: https://github.com/iatomic1
  description: API for Dexion
  title: DEXION API
  version: "1.0"
paths:
  /wallets:
    get:
      description: Retrieve all wallets tracked by the user
      produces:
      - application/json
      responses:
        "200":
          description: Wallets retrieved
          schema:
            allOf:
            - $ref: '#/definitions/backend_api_http.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/backend_internal_db_repository.GetUserTrackedWalletsRow'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/backend_api_http.InternalServerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get tracked wallets
      tags:
      - Wallets
    post:
      consumes:
      - application/json
      description: Add a wallet to user's tracking list
      parameters:
      - description: Wallet tracking data
        in: body
        name: WalletRequest
        required: true
        schema:
          $ref: '#/definitions/backend_internal_db_repository.UpsertUserWalletParams'
      produces:
      - application/json
      responses:
        "201":
          description: Wallet tracked successfully
          schema:
            allOf:
            - $ref: '#/definitions/backend_api_http.Response'
            - properties:
                data:
                  $ref: '#/definitions/backend_internal_db_repository.UserWallet'
              type: object
        "400":
          description: Invalid request data
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Wallet already tracked
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/backend_api_http.InternalServerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Track a new wallet
      tags:
      - Wallets
  /wallets/{address}:
    delete:
      description: Remove a wallet from user's tracking list
      parameters:
      - description: Wallet address
        in: path
        name: address
        required: true
        type: string
      responses:
        "204":
          description: Wallet untracked
        "404":
          description: Wallet not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/backend_api_http.InternalServerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Untrack wallet
      tags:
      - Wallets
    patch:
      consumes:
      - application/json
      description: Update nickname or emoji for a tracked wallet
      parameters:
      - description: Wallet address
        in: path
        name: address
        required: true
        type: string
      - description: Update data
        in: body
        name: preferences
        required: true
        schema:
          $ref: '#/definitions/backend_internal_db_repository.UpdateWalletPreferencesParams'
      produces:
      - application/json
      responses:
        "200":
          description: Preferences updated
          schema:
            allOf:
            - $ref: '#/definitions/backend_api_http.Response'
            - properties:
                data:
                  $ref: '#/definitions/backend_internal_db_repository.UserWallet'
              type: object
        "400":
          description: Invalid request data
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Wallet not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/backend_api_http.InternalServerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update wallet preferences
      tags:
      - Wallets
  /wallets/{address}/watchers:
    get:
      description: Retrieve all wallets in the system
      produces:
      - application/json
      responses:
        "200":
          description: All wallets retrieved
          schema:
            allOf:
            - $ref: '#/definitions/backend_api_http.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/backend_internal_db_repository.Wallet'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/backend_api_http.InternalServerErrorResponse'
      summary: Get all wallets
      tags:
      - Wallets
  /wallets/all:
    get:
      description: Retrieve all wallets in the system
      produces:
      - application/json
      responses:
        "200":
          description: All wallets retrieved
          schema:
            allOf:
            - $ref: '#/definitions/backend_api_http.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/backend_internal_db_repository.Wallet'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/backend_api_http.InternalServerErrorResponse'
      summary: Get all wallets
      tags:
      - Wallets
  /watchlist:
    get:
      description: Retrieve all watchlist entries for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: User watchlist retrieved
          schema:
            allOf:
            - $ref: '#/definitions/backend_api_http.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/backend_internal_db_repository.Watchlist'
                  type: array
              type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/backend_api_http.InternalServerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user's watchlist
      tags:
      - Watchlist
    post:
      consumes:
      - application/json
      description: Add a contract address to user's watchlist
      parameters:
      - description: Watchlist data
        in: body
        name: WatchlistRequest
        required: true
        schema:
          $ref: '#/definitions/backend_internal_db_repository.CreateWatchlistParams'
      produces:
      - application/json
      responses:
        "201":
          description: Watchlist created successfully
          schema:
            allOf:
            - $ref: '#/definitions/backend_api_http.Response'
            - properties:
                data:
                  $ref: '#/definitions/backend_internal_db_repository.Watchlist'
              type: object
        "400":
          description: Invalid request data
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Contract already in watchlist
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/backend_api_http.InternalServerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create a new watchlist entry
      tags:
      - Watchlist
  /watchlist/{id}:
    delete:
      description: Delete a specific watchlist entry by ID
      parameters:
      - description: Watchlist ID (UUID)
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Watchlist entry deleted successfully
          schema:
            $ref: '#/definitions/backend_api_http.Response'
        "400":
          description: Invalid ID
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Watchlist entry not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/backend_api_http.InternalServerErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete watchlist entry
      tags:
      - Watchlist
schemes:
- http
- https
securityDefinitions:
  AccessTokenBearer:
    description: AccessTokenBearer Authentication
    in: header
    name: Authorization
    type: apiKey
  Google OAuth2:
    authorizationUrl: https://accounts.google.com/o/oauth2/auth
    flow: accessCode
    scopes:
      email: Grants access to user's email
      profile: Grants access to user's basic profile info
    tokenUrl: https://oauth2.googleapis.com/token
    type: oauth2
  RefreshTokenBearer:
    description: RefreshTokenBearer Authentication
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Authentication endpoints
  name: Auth
