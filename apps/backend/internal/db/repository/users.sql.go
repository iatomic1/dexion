// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package repository

import (
	"context"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, email_verified, image, invite_code, sub_org_id, wallet_id, wallet_address, wallet_public_key, created_at, sub_org_created, updated_at, two_factor_enabled FROM "users"
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email *string) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.Image,
		&i.InviteCode,
		&i.SubOrgID,
		&i.WalletID,
		&i.WalletAddress,
		&i.WalletPublicKey,
		&i.CreatedAt,
		&i.SubOrgCreated,
		&i.UpdatedAt,
		&i.TwoFactorEnabled,
	)
	return &i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, email, email_verified, image, invite_code, sub_org_id, wallet_id, wallet_address, wallet_public_key, created_at, sub_org_created, updated_at, two_factor_enabled FROM "users"
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id string) (*User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.EmailVerified,
		&i.Image,
		&i.InviteCode,
		&i.SubOrgID,
		&i.WalletID,
		&i.WalletAddress,
		&i.WalletPublicKey,
		&i.CreatedAt,
		&i.SubOrgCreated,
		&i.UpdatedAt,
		&i.TwoFactorEnabled,
	)
	return &i, err
}
