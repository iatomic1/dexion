// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addRefreshTokenID = `-- name: AddRefreshTokenID :one
INSERT INTO "refresh_tokens" (
 id, user_id, expires_at
) VALUES ( $1, $2, $3 )
RETURNING id, user_id, issued_at, expires_at, revoked
`

type AddRefreshTokenIDParams struct {
	ID        uuid.UUID        `json:"id"`
	UserID    pgtype.UUID      `json:"userId"`
	ExpiresAt pgtype.Timestamp `json:"expiresAt"`
}

func (q *Queries) AddRefreshTokenID(ctx context.Context, arg AddRefreshTokenIDParams) (*RefreshToken, error) {
	row := q.db.QueryRow(ctx, addRefreshTokenID, arg.ID, arg.UserID, arg.ExpiresAt)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IssuedAt,
		&i.ExpiresAt,
		&i.Revoked,
	)
	return &i, err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
DELETE FROM "refresh_tokens"
  WHERE id = $1
`

func (q *Queries) DeleteRefreshToken(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteRefreshToken, id)
	return err
}

const getRefreshTokenUserID = `-- name: GetRefreshTokenUserID :one
SELECT user_id FROM refresh_tokens
WHERE id = $1 AND revoked = FALSE
LIMIT 1
`

func (q *Queries) GetRefreshTokenUserID(ctx context.Context, id uuid.UUID) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, getRefreshTokenUserID, id)
	var user_id pgtype.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const refreshTokenExists = `-- name: RefreshTokenExists :one
SELECT EXISTS (
  SELECT 1 FROM "refresh_tokens" WHERE id = $1
)
`

func (q *Queries) RefreshTokenExists(ctx context.Context, id uuid.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, refreshTokenExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
